{"version":3,"sources":["components/AddCategory.tsx","helpers/getGifs.tsx","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGifs.tsx","GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","state","type","value","onChange","target","required","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","img","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAIrB,IAHLC,EAGI,EAHJA,cAIA,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAsBP,GAAtB,mBAAqCO,OACnDN,EAAc,MAIhB,SAEE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAlBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAkBnBG,UAAQ,O,+BC3BHC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXhB,kBAedM,GAfc,4CAAH,sDCFPO,EAAc,SAAC,GAAoD,IAAlDH,EAAiD,EAAjDA,MAAOV,EAA0C,EAA1CA,IACnC,OACE,sBAAKc,UAAU,OAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAGO,EAAU,SAAC,GAAwC,IAAtCnB,EAAqC,EAArCA,SAExB,ECG0B,SAACA,GAC3B,MAA0Bf,mBAAgB,CACxCsB,KAAM,GACNa,SAAS,IAFX,mBAAO3B,EAAP,KAAc4B,EAAd,KAWA,OAPAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CAAEd,KAAMiB,EAAMJ,SAAS,MAC/B,UAEJ,CAACpB,IACGP,EDf2BiC,CAAa1B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,8CAAf,SACGH,EAAOJ,KAAI,SAACkB,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEXjB,SAASiB,IACtB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAOA,OACE,qCACE,iDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACG6C,EAAWpB,KAAI,SAACT,EAAU8B,GAAX,OACd,cAAC,EAAD,CAAgC9B,SAAUA,GAA5BA,EAAW8B,W,MClBnCC,IAASC,OAAO,cAACJ,EAAD,IAAkBK,SAASC,eAAe,W","file":"static/js/main.39ad2142.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({\r\n  setCategories,\r\n}: {\r\n  setCategories: React.Dispatch<React.SetStateAction<string[]>>;\r\n}) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e: any) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((state: string[]) => [inputValue, ...state]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {/* <h2>{inputValue}</h2> */}\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        required\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import ImageItem from \"../models/ImageItem\";\r\n\r\nexport const getGifs = async (category: string): Promise<ImageItem[]> => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=p4ipW2D1jxCVWIRVpnNa55vWPoThoPKM`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((gif: any): ImageItem => {\r\n    return {\r\n      id: gif.id,\r\n      title: gif.title,\r\n      url: gif.images.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","export const GifGridItem = ({ title, url }: { title: string; url: string }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport ImageItem from \"../models/ImageItem\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }: { category: string }) => {\r\n  // const [images, setImages] = useState<ImageItem[]>([]);\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n      <div className=\"card-grid animate__animated animate__fadeIn\">\r\n        {images.map((img: ImageItem) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport ImageItem from \"../models/ImageItem\";\r\n\r\ninterface state {\r\n  data: ImageItem[];\r\n  loading: boolean;\r\n}\r\n\r\nexport const useFetchGifs = (category: string) => {\r\n  const [state, setstate] = useState<state>({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setstate({ data: imgs, loading: false });\r\n      }, 2000);\r\n    });\r\n  }, [category]);\r\n  return state;\r\n};\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport default function GifExpertApp() {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  //   const handleAdd = () => {\r\n  //     const newArray: string[] = [...categories, \"Hunter x hunter\"];\r\n  //     setCategories(newArray);\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n      <div>Gif Expert App</div>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n      <ol>\r\n        {categories.map((category, index) => (\r\n          <GifGrid key={category + index} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n","import ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}